------------------------------------------------------------------------------
------------------------------------------------------------------------------
------------------------------------------------------------------------------
------------------------------------------------------------------------------
----		CODAGE DES METHODES DU TYPE T_COURS
------------------------------------------------------------------------------
------------------------------------------------------------------------------
------------------------------------------------------------------------------
------------------------------------------------------------------------------

-- LE CORPS DES METHODES
--codage des méthodes

create or replace type body T_COURS as


	constructor function T_COURS(N IN NUMBER, I IN varchar2, V IN NUMBER) RETURN SELF AS RESULT IS
	BEGIN
		SELF.NUMCOURS:=N;
		SELF.INTIT:=I;
		SELF.VOLH:=V;
		SELF.LISTE_ENS:=NULL;
		RETURN;
	END T_COURS;


	constructor function T_COURS (N IN NUMBER, I IN varchar2) RETURN SELF AS RESULT IS
	BEGIN
		SELF.NUMCOURS:=N;
		SELF.INTIT:=I;
		SELF.VOLH:=NULL;
		SELF.LISTE_ENS:=NULL;
		RETURN;
	END T_COURS;

	constructor function T_COURS(N IN NUMBER, I IN varchar2, V IN NUMBER, L IN T_LISTE_ENS) RETURN SELF AS RESULT IS
		C	NUMBER;
		NBR	NUMBER;	
	BEGIN
		SELF.NUMCOURS:=N;
		SELF.INTIT:=I;
		SELF.VOLH:=V;
		SELF.LISTE_ENS:=L;
		RETURN;
	END T_COURS;
	--IL FAUT PAS COPIER LA LISTE DYNAMIQUEMENT COMME DANS L'OBJET PUR
	-- UNE SIMPLE AFFECTATION MARCHE; L'AUTRE PROVOQUE UNE ERREUR

	member function VOLH_COURS RETURN NUMBER IS
	BEGIN
		RETURN SELF.VOLH;
	END VOLH_COURS;


	member function EXISTE_PROF(CIN_PROF IN VARCHAR2) RETURN BOOLEAN IS
		REF_PROF			REF T_PERS;
		LISTE_PROFS			T_LISTE_ENS;
		NBR_PROFS			NUMBER;
		COMPT				NUMBER;
		EXC_PROF_INEXISTANT		EXCEPTION;
	BEGIN
		--RECUPERER LA REF DU PROF
		SELECT REF(D) INTO REF_PROF FROM TAB_PERS D
		WHERE D.CIN=CIN_PROF;

		IF REF_PROF IS NULL
		THEN RAISE EXC_PROF_INEXISTANT;
		ELSE 
			--RECUPERER LA LISTE DES PROFS DU COURS
			SELECT LISTE_ENS INTO LISTE_PROFS
			FROM TAB_COURS
			WHERE NUMCOURS=SELF.NUMCOURS;

			--TESTER SI LA LSITE DES PROFS EST DEJA CREE
			--SI ELLE N EST PAS DEJA CREE ON NE PEUT PAS L ACCEDER
			IF LISTE_PROFS IS NULL
			THEN 	RETURN FALSE;
			ELSE
				--TEST SUR LA LISTE DES PROFS
				-- LA LLISTE EST DEJA CREE
				NBR_PROFS:=LISTE_PROFS.COUNT();
				COMPT:=1;
				WHILE COMPT <= NBR_PROFS LOOP	
					IF 	LISTE_PROFS(COMPT)=REF_PROF
					THEN 	RETURN TRUE;
					ELSE 	COMPT:=COMPT+1;
					END IF;
				END LOOP;
				RETURN FALSE;
			END IF;
		END IF;

		--TRAITEMENT DES EXCEPTIONS
		EXCEPTION
			WHEN EXC_PROF_INEXISTANT THEN DBMS_OUTPUT.PUT_LINE ('ERR EXC_PROF_INEXISTANT: PROF INEXISTANT!!');
	END EXISTE_PROF;

	--
	member function LISTE_PROF RETURN T_LISTE_ENS IS
	BEGIN
		
		RETURN SELF.LISTE_ENS;

	END LISTE_PROF;
	--

	member procedure modif_INTIT (NEW_IN IN varchar2) IS
	BEGIN
		UPDATE TAB_COURS
		SET INTIT=NEW_IN
		WHERE NUMCOURS=SELF.NUMCOURS;
		COMMIT;
	END modif_INTIT;

	member procedure AJOUTER_PROF (CIN_PROF IN varchar2) IS
		REF_PROF				REF T_PERS;
		LISTE_PROFS				T_LISTE_ENS;
		LIMITE_LISTE_PROFS		NUMBER;
		NBR_PROFS				NUMBER;
		EXC_PROF_INEXISTANT		EXCEPTION;
		EXC_PROF_SATURE			EXCEPTION;
	BEGIN
		--RECUPERER LA REF DU PROF
		SELECT REF(D) INTO REF_PROF FROM TAB_PERS D
		WHERE D.CIN=CIN_PROF;

		IF REF_PROF IS NULL
		THEN RAISE EXC_PROF_INEXISTANT;
		ELSE 
			--RECUPERER LA LISTE DES PROFS DU COURS
			SELECT LISTE_ENS INTO LISTE_PROFS
			FROM TAB_COURS
			WHERE NUMCOURS=SELF.NUMCOURS;

			--TESTER SI LA LSITE DES PROFS EST DEJA CREE
			--SI ELLE N EST PAS DEJA CREE ON NE PEUT PAS L ACCEDER
			IF LISTE_PROFS IS NULL
			THEN 	--MISE A JOUR
				UPDATE TAB_COURS
				SET LISTE_ENS=T_LISTE_ENS(REF_PROF)
				WHERE NUMCOURS=SELF.NUMCOURS;
				COMMIT;
			ELSE
				--TEST SUR LA LISTE DES PROFS
				-- LA LLISTE EST DEJA CREE
				LIMITE_LISTE_PROFS:=LISTE_PROFS.LIMIT();
				NBR_PROFS:=LISTE_PROFS.COUNT();
				IF 	NBR_PROFS < LIMITE_LISTE_PROFS
				THEN 	LISTE_PROFS.EXTEND();
					LISTE_PROFS(NBR_PROFS+1):=REF_PROF;
					--MISE A JOUR
					UPDATE TAB_COURS
					SET LISTE_ENS=LISTE_PROFS
					WHERE NUMCOURS=SELF.NUMCOURS;
					COMMIT;
				ELSE RAISE EXC_PROF_SATURE;
				END IF;
			END IF;
		END IF;

		--TRAITEMENT DES EXCEPTIONS
		EXCEPTION
			WHEN EXC_PROF_INEXISTANT THEN DBMS_OUTPUT.PUT_LINE ('ERR EXC_PROF_INEXISTANT: PROF INEXISTANT!!');
			WHEN EXC_PROF_SATURE THEN DBMS_OUTPUT.PUT_LINE ('ERR EXC_PROF_SATURE: LISTE DES PROFS SATUREE!!');
	END AJOUTER_PROF;


	member procedure AJOUTER_LISTE_PROF (CLISTE_PROF IN T_LISTE_ENS) IS
	BEGIN
		UPDATE TAB_COURS
		SET LISTE_ENS=CLISTE_PROF
		WHERE NUMCOURS=SELF.NUMCOURS;
		COMMIT;
	END AJOUTER_LISTE_PROF;

	member procedure RETIRER_PROF (CIN_PROF IN varchar2) IS
	REF_PROF			REF T_PERS;
		LISTE_PROFS			T_LISTE_ENS;
		LISTE_PROFS_TEMP		T_LISTE_ENS;
		NBR_PROFS			NUMBER;
		COMPT_OLD			NUMBER;
		COMPT_NEW			NUMBER;
		EXC_PROF_INEXISTANT		EXCEPTION;
		EXC_PROF_VIDE			EXCEPTION;
		EXC_PROF_PAS_DS_LISTE		EXCEPTION;
	BEGIN
		--RECUPERER LA REF DU PROF
		SELECT REF(D) INTO REF_PROF FROM TAB_PERS D
		WHERE D.CIN=CIN_PROF;

		IF REF_PROF IS NULL
		THEN RAISE EXC_PROF_INEXISTANT;
		ELSE 
			--RECUPERER LA LISTE DES PROFS DU COURS
			SELECT LISTE_ENS INTO LISTE_PROFS
			FROM TAB_COURS
			WHERE NUMCOURS=SELF.NUMCOURS;

			--TESTER SI LA LSITE DES PROFS EST DEJA CREE
			--SI ELLE N EST PAS DEJA CREE ON NE PEUT PAS L ACCEDER
			IF LISTE_PROFS IS NULL
			THEN 	RAISE EXC_PROF_VIDE;
			ELSE
				--TEST SUR LA LISTE DES PROFS
				-- LA LLISTE EST DEJA CREE
				NBR_PROFS:=LISTE_PROFS.COUNT();
				LISTE_PROFS_TEMP:=NEW T_LISTE_ENS();
				COMPT_OLD:=1; COMPT_NEW:=1;
				WHILE COMPT_OLD <= NBR_PROFS LOOP	
					IF 	LISTE_PROFS(COMPT_OLD)<>REF_PROF
					THEN 	LISTE_PROFS_TEMP.EXTEND();
						LISTE_PROFS_TEMP(COMPT_NEW):=LISTE_PROFS(COMPT_OLD);
					 	COMPT_OLD:=COMPT_OLD+1;
						COMPT_NEW:=COMPT_NEW+1;
					ELSE 	COMPT_OLD:=COMPT_OLD+1;
					END IF;
				END LOOP;
				IF 	COMPT_NEW=COMPT_OLD
				THEN 	RAISE EXC_PROF_PAS_DS_LISTE;
				ELSE 	UPDATE TAB_COURS
					SET LISTE_ENS=LISTE_PROFS_TEMP
					WHERE NUMCOURS=SELF.NUMCOURS;
					COMMIT;
				END IF;
			END IF;
		END IF;

		--TRAITEMENT DES EXCEPTIONS
		EXCEPTION
			WHEN EXC_PROF_INEXISTANT 	THEN DBMS_OUTPUT.PUT_LINE ('ERR EXC_PROF_INEXISTANT: PROF INEXISTANT!!');
			WHEN EXC_PROF_VIDE 	 	THEN DBMS_OUTPUT.PUT_LINE ('ERR EXC_PROF_VIDE: LA LISTE EST VIDE!!');
			WHEN EXC_PROF_PAS_DS_LISTE 	THEN DBMS_OUTPUT.PUT_LINE ('ERR EXC_PROF_PAS_DS_LISTE: LE PROF N EST PAS DANS LA LISTE!!');
	END RETIRER_PROF;

	static procedure AJOUTER_COURS(N IN NUMBER, I IN varchar2, V IN NUMBER, LP IN T_LISTE_ENS) IS
		NEWCOURS		T_COURS;
		EXC_PK_VILOATION	EXCEPTION;	
		PRAGMA 			EXCEPTION_INIT( EXC_PK_VILOATION, -1) ;
	BEGIN
		NEWCOURS:=NEW T_COURS(N, I, V); --, LP
		NEWCOURS.LISTE_ENS:=LP; --NEW T_LISTE_ENS();UNE SIMPLE AFFECTATION MARCHE PAS DE COPIE DYNAMIQUE
		INSERT INTO TAB_COURS VALUES (NEWCOURS);
		EXCEPTION
			WHEN EXC_PK_VILOATION THEN DBMS_OUTPUT.PUT_LINE ('EXC_PK_VILOATION: COURS EXISTE DEJA!!');
		
		COMMIT;
	END AJOUTER_COURS;

	static procedure AJOUTER_COURS(C IN T_COURS) IS
		EXC_PK_VILOATION	EXCEPTION;	
		PRAGMA 			EXCEPTION_INIT( EXC_PK_VILOATION, -1) ;
	BEGIN
		INSERT INTO TAB_COURS VALUES (C);
		EXCEPTION
			WHEN EXC_PK_VILOATION THEN DBMS_OUTPUT.PUT_LINE ('EXC_PK_VILOATION: COURS EXISTE DEJA!!');
		COMMIT;
	END AJOUTER_COURS;

	static procedure SUPPRIMER_COURS(N IN NUMBER) IS
	BEGIN
		DELETE TAB_COURS
		WHERE NUMCOURS=N;
		COMMIT;
	END SUPPRIMER_COURS;
	---
END; --body
/


------------------------------------------------------------------------------
----			FIN DU CODAGE DES METHODES DU TYPE T_PERS
------------------------------------------------------------------------------

