le reste de l'exam est déja traité dans l'autre fichier

descripteur de fichier minimal du socket  : 3
0:stdin
1:stdout
2:stderr

quelles sont les avantages d'utilisation du NAT :

- le fait d'economiser les adresses IP .
- joue le role d'une couche supplémentaire de sécurité .


différence entre send et read :
send est utilisée juste dans les sockets 
read on peut l'utiliser avec tous les fichiers descripteurs 

comment savoir qu'un client s'est déconneté ou non ?

en utilisant la fonction read 
                //Check if it was for closing , and also read the incoming message
                if ((valread = read( sd , buffer, 1024)) == 0)
                {
                    //Somebody disconnected , get his details and print
                  
                    printf("Host disconnected , ip %s , port %d \n" , inet_ntoa(address.sin_addr) , ntohs(address.sin_port));
   
                }




PARTIE CODE :

énoncé :
écrire un serveur multiclient avec la fonction select qui lit une chaine de caractère depuis l'entrée standart et l'envoie
à tous les clients connectés.


réponse : 

#define PORT 8080


int main(int argc, char const *argv[])
{
    int master_socket, new_socket;

    struct sockaddr_in address;
    
    int addrlen = sizeof(address);
    char buffer[1024] = {0},reponse[1024] = {0};
    
     fd_set readfds;

     int max_sd;
      
    // Creating socket file descriptor
    master_socket = socket(AF_INET, SOCK_STREAM, 0)) 


    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons( PORT );
      
    // Forcefully attaching socket to the port 8080
     bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0

    listen(server_fd, 4) < 0
 
    while(1){

        	     FD_SET(master_socket, &readfds);
                max_sd = master_socket;

               FD_SET(stdin, &readfds);

               max_sd = (master_socket<stdin)?stdin:master_socket;

               activity = select( max_sd + 1 , &readfds , NULL , NULL , NULL);

                if (FD_ISSET(master_socket, &readfds))  // if (FD_ISSET(master_socket, &readfds)==1)
                {
                  new_socket = accept(master_socket, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0);
                    
                       for (i = 0; i < max_clients; i++) 
                      {
                          //if position is empty
                          if( client_socket[i] == 0 )
                          {
                              client_socket[i] = new_socket;
                              printf("Adding to list of sockets as %d\n" , i);
                               
                              break;
                          }
                      }

            {

                
                }
                else if (FD_ISSET(stdin, &readfds)) 
                {
                  scanf("%s",buffer);
                    for (i = 0; i < max_clients; i++) 
                      {
                          //if position is empty
                        send(client_socket[i], buffer, strlen(buffer), 0) 

                      }

                
                }


}
    
    return 0;
}

